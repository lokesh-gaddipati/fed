{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red12\green14\blue18;\red91\green98\blue110;}
{\*\expandedcolortbl;;\cssrgb\c5098\c6667\c9020;\cssrgb\c43137\c46275\c50588;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
from collections import deque\
class State:\
    def __init__(self, missionaries, cannibals, boat):\
        self.m = missionaries\
        self.c = cannibals\
        self.b = boat\
    def __eq__(self, other):\
        return self.m == other.m and self.c == other.c and self.b == other.b\
    def __hash__(self):\
        return hash((self.m, self.c, self.b))\
M=int(input("Enter the missionaries :"))\
C=int(input("Enter the cannibals :"))# Define the initial state and goal state\
initial_state = State(M, C, 1)  # (Missionaries on the left, Cannibals on the left, Boat position)\
goal_state = State(0, 0, 0)     # (Missionaries on the right, Cannibals on the right, Boat position)\
def is_valid_state(state):\
    m, c, b = state.m, state.c, state.b\
    return 0 <= m <= M and 0 <= c <= C and (m == 0 or m >= c) and ((M - m) == 0 or (M - m) >= (C - c))\
def get_next_states(state):\
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]\
    next_states = []\
    for move in moves:\
        if state.b == 1:  # Boat on the left\
            new_state = State(state.m - move[0], state.c - move[1], 0)\
        else:  # Boat on the right\
            new_state = State(state.m + move[0], state.c + move[1], 1)\
        if is_valid_state(new_state):\
            next_states.append(new_state)\
    return next_states\
def dfs_search():\
    visited = set()\
    stack = deque([(initial_state, [])])\
    while stack:\
        current_state, path = stack.pop()\
        if current_state == goal_state:\
            return path\
        if current_state not in visited:\
            visited.add(current_state)\
            for next_state in get_next_states(current_state):\
                stack.append((next_state, path + [next_state]))\
solution = dfs_search()\
if solution:\
    print("Solution found:")\
    for i, state in enumerate(solution):\
        moved_m = abs(state.m - solution[i-1].m) if i >= 0 else 0\
        moved_c = abs(state.c - solution[i-1].c) if i >= 0 else 0\
        boat = "Left" if state.b == 1 else "Right"\
        m, c = M - state.m, C - state.c\
        print(f"Step \{i + 1\}: \{moved_m\}M \{moved_c\}C moved from \{'Right' if state.b == 1 else 'Left'\} to \{'Right' if state.b == 0 else 'Left'\}")\
        print(f"\{state.m\}M \{state.c\}C are on Left Side")\
        print(f"\{m\}M \{c\}C are on Right Side")\
        print(f"Boat: \{boat\} side")\
        print()\
else:\
    print("No solution found.")\
\
\
\
\pard\pardeftab720\qr\partightenfactor0
\cf3 \cb2 1\cb1 \
\cb2 2\cb1 \
\
\cb2 3\cb1 \
\cb2 4\cb1 \
\cb2 5\cb1 \
\cb2 6\cb1 \
\cb2 7\cb1 \
\cb2 8\cb1 \
\cb2 9\cb1 \
\cb2 10\cb1 \
\cb2 11\cb1 \
\cb2 12\cb1 \
\cb2 13\cb1 \
\cb2 14\cb1 \
\cb2 15\cb1 \
\cb2 16\cb1 \
\cb2 17\cb1 \
\cb2 18\cb1 \
\
\cb2 19\cb1 \
\cb2 20\cb1 \
\cb2 21\cb1 \
\cb2 22\cb1 \
\cb2 23\cb1 \
\cb2 24\cb1 \
\cb2 25\cb1 \
\cb2 26\cb1 \
\cb2 27\cb1 \
\cb2 28\cb1 \
\cb2 29\cb1 \
\
\cb2 30\cb1 \
\cb2 31\cb1 \
\cb2 32\cb1 \
\cb2 33\cb1 \
\cb2 34\cb1 \
\cb2 35\cb1 \
\cb2 36\cb1 \
\cb2 37\cb1 \
\cb2 38\cb1 \
\cb2 39\cb1 \
\cb2 40\cb1 \
\cb2 41\cb1 \
\cb2 42\cb1 \
\cb2 43\cb1 \
\cb2 44\cb1 \
\cb2 45\cb1 \
\cb2 46\cb1 \
\cb2 47\cb1 \
\cb2 48\cb1 \
\cb2 49\cb1 \
\cb2 50\cb1 \
\cb2 51\cb1 \
\cb2 52\cb1 \
\cb2 53\cb1 \
\cb2 54\cb1 \
\cb2 55\cb1 \
\cb2 56\cb1 \
\cb2 57\cb1 \
\cb2 58\cb1 \
}